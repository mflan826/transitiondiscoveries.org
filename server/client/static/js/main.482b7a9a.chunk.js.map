{"version":3,"sources":["config/menu.js","pages/About/index.js","config/index.js","config/routes.js","pages/ContactUs/ContactUsList.js","pages/ContactUs/index.js","App.js","registerServiceWorker.js","index.js"],"names":["Component","About","document","title","Config","app","name","Route","server","dev","prod","api","window","location","hostname","this","ContactUsList","List","props","Datagrid","TextField","source","type","list","icon","PeopleIcon","LoginPage","Login","backgroundImage","App","Admin","loginPage","dataProvider","loopbackRestClient","authProvider","authClient","Resource","ContactUs","isLocalhost","Boolean","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"uTAEmBA,Y,8DCsBJC,E,kLAfXC,SAASC,MAAQC,EAAOC,IAAIC,KAAO,a,+BAInC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYH,MAAM,UAClB,kBAAC,IAAD,KACE,wE,GAVUH,aCPPI,GCMVG,EAAA,EDNmB,CACpBF,IAAK,CACHC,KAAM,YAERE,OAAQ,CACNC,IAAK,4BACLC,KAAM,gDAERC,IARoB,WASlB,MAAqC,cAA7BC,OAAOC,SAASC,UAAyD,cAA7BF,OAAOC,SAASC,SAA4BC,KAAKP,OAAOC,IAAMM,KAAKP,OAAOE,Q,2BEsBnHM,E,kLApBXd,SAASC,MAAQC,EAAOC,IAAIC,KAAO,iB,+BAInC,OACE,kBAACW,EAAA,EAASF,KAAKG,MACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,OAAO,SAClB,kBAACD,EAAA,EAAD,CAAWE,KAAK,QAAQD,OAAO,UAC/B,kBAACD,EAAA,EAAD,CAAWC,OAAO,UAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,YAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,kB,GAbArB,a,SCNb,GACbM,KAAM,YACNiB,KAAMP,EACNQ,K,OAAMC,GCGFC,G,OAAY,kBAChB,kBAACC,EAAA,EAAD,CAAOC,gBAAgB,6IAqBVC,E,kLAhBX3B,SAASC,MAAQC,EAAOC,IAAIC,O,+BAI5B,OACE,kBAACwB,EAAA,EAAD,CACEC,UAAWL,EACXM,aAAcC,IAAmB7B,EAAOO,OACxCuB,aAAcC,qBAAW/B,EAAOO,MAAQ,iBAExC,kBAACyB,EAAA,EAAaC,Q,GAZJrC,aCHZsC,EAAcC,QACW,cAA7B3B,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS0B,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,kBAAC,EAAD,MAASzD,SAAS0D,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwBlD,OAAOC,UAC3CkD,SAAWnD,OAAOC,SAASkD,OAIvC,OAGFnD,OAAOoD,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,GAAN,sBAEPxB,IAiDV,SAAiCI,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BlC,OAAOC,SAAS4D,eAKpBhC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEArEAmB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OCzCxBiC,K","file":"static/js/main.482b7a9a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Menu extends Component {\n  render() {\n    return (\n      <div className=\"Menu\">Menu</div>\n    );\n  }\n}\n\nexport default Menu;","import React, { Component } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\n\nimport { Config } from \"../../config\";\n\nclass About extends Component {\n  componentDidMount() {\n    document.title = Config.app.name + \" - About\";\n  }\n\n  render() {\n    return (\n      <Card>\n        <CardHeader title=\"About\" />\n        <CardContent>\n          <p>Implement by Janbask Digital Design</p>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default About;\n","export const Config = {\n  app: {\n    name: 'TD Admin'\n  },\n  server: {\n    dev: 'http://localhost:3000/api',\n    prod: 'http://dev.cms.transitiondiscoveries.org/api'\n  },\n  api() {\n    return (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') ? this.server.dev : this.server.prod;\n  }\n};\n\nexport * from './menu';\nexport * from './routes';","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport About from '../pages/About';\n\nexport default [\n  <Route exact path=\"/about\" component={About} />\n];","import React, { Component } from 'react';\nimport {\n  List,\n  Datagrid,\n  TextField,\n} from 'react-admin';\n\nimport { Config } from '../../config';\n\nclass ContactUsList extends Component {\n  componentDidMount() {\n    document.title = Config.app.name + ' - ContactUs';\n  }\n\n  render() {\n    return (\n      <List {...this.props}>\n        <Datagrid>\n          <TextField source=\"name\" />\n          <TextField type=\"email\" source=\"email\" />\n          <TextField source=\"phone\" />\n          <TextField source=\"subject\" />\n          <TextField source=\"message\" />\n          {/* <EditButton />\n          <ShowButton /> */}\n        </Datagrid>\n      </List>\n    );\n  }\n}\n\nexport default ContactUsList;","import ContactUsList from './ContactUsList';\nimport PeopleIcon from '@material-ui/icons/People';\n\nexport default {\n  name: 'contactus',\n  list: ContactUsList,\n  icon: PeopleIcon\n}","import React, { Component } from \"react\";\nimport { Admin, Login, Resource } from \"react-admin\";\nimport loopbackRestClient, { authClient } from \"aor-loopback\";\n\nimport { Config } from \"./config\";\nimport ContactUs from \"./pages/ContactUs\";\n\nimport \"./App.css\";\n\nconst LoginPage = () => (\n  <Login backgroundImage=\"https://images.unsplash.com/photo-1504438190342-5951e134ffee?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80\" />\n);\n\nclass App extends Component {\n  componentDidMount() {\n    document.title = Config.app.name;\n  }\n\n  render() {\n    return (\n      <Admin\n        loginPage={LoginPage}\n        dataProvider={loopbackRestClient(Config.api())}\n        authProvider={authClient(Config.api() + \"/Users/login\")}\n      >\n        <Resource {...ContactUs} />\n      </Admin>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}